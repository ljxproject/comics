"""
Django settings for comic project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import re
from datetime import timedelta

import djcelery
from celery.schedules import crontab

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '2@l!1)$1%)z*-g#pu8o@^2i_t%x2d=j%@f8=ahx2t*xwjvlc-4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'userapi',
    'rest_framework',
    'debug_toolbar',
    'haystack',
    'djcelery',
    'xadmin',
    'crispy_forms',
    'gunicorn',
    'adminx',
    'DjangoUeditor',
    # 'guardian',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware'
]

ROOT_URLCONF = 'comic.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

# AUTHENTICATION_BACKENDS = (
#     'django.contrib.auth.backends.ModelBackend',
#     'guardian.backends.ObjectPermissionBackend',
# )

WSGI_APPLICATION = 'comic.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'comics',
        'HOST': '127.0.0.1',
        # 'HOST': '47.74.246.180',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': 'DingYu@906',
        # 'PASSWORD': 'root',
    },
    'data_backup': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'information_schema',
        'HOST': '127.0.0.1',
        # 'HOST': '47.74.246.180',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': 'DingYu@906',
        # 'PASSWORD': 'root',
    }
}
# backup
BACKUP_FILE = '/home/ljx/opt/mysql-backup'
# DATABASE_ROUTERS = ['comic.database_router.DatabaseRouter']
# DATABASE_APPS_MAPPING = {
#     "tables": "data_backup"
# }

REDIS_HOST = '127.0.0.1'

# Session
SESSION_ENGINE = 'redis_sessions.session'
SESSION_REDIS = {
    'host': 'localhost',
    'port': 6379,
    'db': 1,
    'password': ""
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
# LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

TIME_ZONE_XADMIN = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/img/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# debug-toolbar settings
INTERNAL_IPS = ('127.0.0.1',)
DEBUG_TOOLBAR_CONFIG = {'JQUERY_URL': "http://code.jquery.com/jquery-2.1.1.min.js"}

# mangaupload
SDK_PATH = '/home/ljx/opt/project/comics/comicsSDK'
SDK_ENV_PATH = '/home/ljx/opt/env'
RESOURCES_PATH = '/home/ljx/opt/resource'

# rest-framework
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    # 'DEFAULT_THROTTLE_RATES': {'limit': '2/minute'}
}

# haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'templates/whoosh_index')
    }
}

HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# celery
djcelery.setup_loader()
BROKER_URL = 'redis://127.0.0.1:6379/2'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/3'
CELERY_IMPORTS = ('userapi.sms_task', 'userapi.pay_task', 'api.redis_task', 'adminx.order_statistics_task')
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

CELERYBEAT_SCHEDULE = {
    # todo 处理退还邮件

    ##定时器任务2
    u"test_case2": {
        "task": "api.redis_task.redis_to_mysql",
        "schedule": crontab(hour=8, minute=30),  # timedelta(seconds=10)  # todo 日更新
        "args": (),
    },

    # 定时器任务3 todo 一周计算download量更改漫画分类  当前端开放下载功能时启动
    u"test_case3": {
        "task": "api.redis_task.create_trend_comics",
        "schedule": crontab(day_of_week=1, hour=9, minute=10),  # crontab(hour=8, minute=30)  # todo 周更新
        "args": (),
    },

    # 定时器任务4
    u"test_case4": {
        "task": "api.redis_task.change_free_permission_and_imgresource",
        "schedule": crontab(day_of_week=1, hour=8, minute=50),
        # crontab(day_of_week=1, hour=8, minute=50)crontab(hour=8, minute=30) # todo 周更新
        "args": (),
    },
    # 定时器任务5
    u"test_case5": {
        "task": "adminx.order_statistics_task.order_statistics",
        "schedule": crontab(hour=8, minute=1),
        "args": (),
    }
}

# app title
APP_TITLE = "Manga Burger"

# logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(levelname)s]- %(message)s'
        },
    },
    'filters': {
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'default_django': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/logs/', 'all.log'),  # 或者直接写路径：'c:\logs\all.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
        'console': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'request_handler': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/logs/', 'request.log'),  # 或者直接写路径：'filename':'c:\logs\request.log''
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
        'scprits_handler': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/logs/', 'script.log'),  # 或者直接写路径：'filename':'c:\logs\script.log'
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['default_django', 'console'],
            'level': 'DEBUG',
            'propagate': False
        },
        'comics.app': {
            'handlers': ['default_django', 'console'],
            'level': 'ERROR',
            'propagate': True
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'INFO',
            'propagate': False
        },
        'scripts': {  # 脚本专用日志
            'handlers': ['scprits_handler'],
            'level': 'INFO',
            'propagate': False
        },
    }
}
